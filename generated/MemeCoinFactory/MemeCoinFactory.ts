// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MemeCoinCreated extends ethereum.Event {
  get params(): MemeCoinCreated__Params {
    return new MemeCoinCreated__Params(this);
  }
}

export class MemeCoinCreated__Params {
  _event: MemeCoinCreated;

  constructor(event: MemeCoinCreated) {
    this._event = event;
  }

  get memeCoin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get initialSupply(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get lpToken(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MemeCoinFactory extends ethereum.SmartContract {
  static bind(address: Address): MemeCoinFactory {
    return new MemeCoinFactory("MemeCoinFactory", address);
  }

  allMemeCoinTokens(param0: BigInt): Address {
    let result = super.call(
      "allMemeCoinTokens",
      "allMemeCoinTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_allMemeCoinTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allMemeCoinTokens",
      "allMemeCoinTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  coinToCreator(param0: Address): Address {
    let result = super.call(
      "coinToCreator",
      "coinToCreator(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_coinToCreator(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "coinToCreator",
      "coinToCreator(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createMemeCoin(
    name: string,
    symbol: string,
    maxSupply: BigInt,
    initialSupply: BigInt,
    usdtAmount: BigInt
  ): Address {
    let result = super.call(
      "createMemeCoin",
      "createMemeCoin(string,string,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromUnsignedBigInt(initialSupply),
        ethereum.Value.fromUnsignedBigInt(usdtAmount)
      ]
    );

    return result[0].toAddress();
  }

  try_createMemeCoin(
    name: string,
    symbol: string,
    maxSupply: BigInt,
    initialSupply: BigInt,
    usdtAmount: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createMemeCoin",
      "createMemeCoin(string,string,uint256,uint256,uint256):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromUnsignedBigInt(initialSupply),
        ethereum.Value.fromUnsignedBigInt(usdtAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMemeCoinCount(): BigInt {
    let result = super.call(
      "getMemeCoinCount",
      "getMemeCoinCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMemeCoinCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMemeCoinCount",
      "getMemeCoinCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMemeCoinCreator(memeCoin: Address): Address {
    let result = super.call(
      "getMemeCoinCreator",
      "getMemeCoinCreator(address):(address)",
      [ethereum.Value.fromAddress(memeCoin)]
    );

    return result[0].toAddress();
  }

  try_getMemeCoinCreator(memeCoin: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMemeCoinCreator",
      "getMemeCoinCreator(address):(address)",
      [ethereum.Value.fromAddress(memeCoin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityFactory(): Address {
    let result = super.call(
      "liquidityFactory",
      "liquidityFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_liquidityFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityFactory",
      "liquidityFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdtToken(): Address {
    let result = super.call("usdtToken", "usdtToken():(address)", []);

    return result[0].toAddress();
  }

  try_usdtToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdtToken", "usdtToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdtToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _liquidityFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateMemeCoinCall extends ethereum.Call {
  get inputs(): CreateMemeCoinCall__Inputs {
    return new CreateMemeCoinCall__Inputs(this);
  }

  get outputs(): CreateMemeCoinCall__Outputs {
    return new CreateMemeCoinCall__Outputs(this);
  }
}

export class CreateMemeCoinCall__Inputs {
  _call: CreateMemeCoinCall;

  constructor(call: CreateMemeCoinCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get usdtAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateMemeCoinCall__Outputs {
  _call: CreateMemeCoinCall;

  constructor(call: CreateMemeCoinCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
